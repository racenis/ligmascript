#ifndef INTERPRETER_ERROR_H
#define INTERPRETER_ERROR_H

#include <exception>

namespace ligma {
    enum interpreter_error_t {
        INTERPRETER_ERROR_UNKNOWN,                     // only for testing
        
        INTERPRETER_ERROR_EXPLODE,
        
        INTERPRETER_ERROR_UNCONVERTABLE_TO_INT,
        INTERPRETER_ERROR_UNCONVERTABLE_TO_FLOAT,
        
        INTERPRETER_ERROR_ADDITION_NON_NUMERIC,                 // addition between non-numerics; e.g. 2 + `bepis
        INTERPRETER_ERROR_ADDITION_INCOMPATIBLE_LENGTHS,        // addition between inc. lengths; e.g. (vec 1 2) + (vec 1 2 3)
        INTERPRETER_ERROR_SUBTRACTION_NON_NUMERIC,              // same as addition
        INTERPRETER_ERROR_SUBTRACTION_INCOMPATIBLE_LENGTHS,     // same as addition
        INTERPRETER_ERROR_MULTIPLICATION_NON_NUMERIC,           // same as addition
        INTERPRETER_ERROR_MULTIPLICATION_INCOMPATIBLE_LENGTHS,  // same as addition
        INTERPRETER_ERROR_DIVISION_NON_NUMERIC,                 // same as addition
        INTERPRETER_ERROR_DIVISION_INCOMPATIBLE_LENGTHS,        // same as addition
        
        INTERPRETER_ERROR_REF_STACK_OVERFLOW,
        INTERPRETER_ERROR_REF_STACK_UNDERFLOW,
        INTERPRETER_ERROR_JMP_STACK_OVERFLOW,
        INTERPRETER_ERROR_JMP_STACK_UNDERFLOW,
        INTERPRETER_ERROR_LCL_STACK_OVERFLOW,
        INTERPRETER_ERROR_LCL_STACK_UNDERFLOW,
        INTERPRETER_ERROR_LCL_STACK_ILLEGAL_LOCAL,              // local access overflow
        
        INTERPRETER_ERROR_ASSIGNING_READ_ONLY,
        INTERPRETER_ERROR_ASSIGNING_NON_NUMERIC_TO_EXT_INT,
        INTERPRETER_ERROR_ASSIGNING_NON_NUMERIC_TO_EXT_FLOAT,
        INTERPRETER_ERROR_ASSIGNING_NON_STRING_TO_EXT_STRING,
        INTERPRETER_ERROR_ASSIGNING_TO_EXT_STRING_NO_SPACE,
        INTERPRETER_ERROR_ASSIGNING_TO_EXT_LENGTH_MISMATCH,
        INTERPRETER_ERROR_ASSIGNING_TO_ILLEGAL_EXT,
        
        INTERPRETER_ERROR_LIST_OPERATION_ON_NON_LIST,
        
        INTERPRETER_ERROR_ILLEGAL_VECTOR_LENGTH,
        INTEPRETER_ERROR_VECTOR_MAKE_NON_NUMERIC,
        INTERPRETER_ERROR_MAKE_VECTOR_IN_VECTOR,
        INTERPRETER_ERROR_MAKE_INT_VECTOR_NON_INT,
        
        INTERPRETER_ERROR_VECTOR_EXTRACT_NON_NUMERIC_INDEX,
        INTERPRETER_ERROR_VECTOR_EXTRACT_VECTOR_INDEX,
        INTERPRETER_ERROR_VECTOR_EXTRACT_ILLEGAL_VECTOR,
        INTERPRETER_ERROR_VECTOR_EXTRACT_OUT_OF_BOUNDS,
        
        INTERPRETER_ERROR_VECTOR_INSERT_NON_NUMERIC_INDEX,
        INTERPRETER_ERROR_VECTOR_INSERT_VECTOR_INDEX,
        INTERPRETER_ERROR_VECTOR_INSERT_ILLEGAL_VECTOR,
        INTERPRETER_ERROR_VECTOR_INSERT_ILLEGAL_VALUE,
        INTERPRETER_ERROR_VECTOR_INSERT_VECTOR_IN_VECTOR,
        INTERPRETER_ERROR_VECTOR_INSERT_OUT_OF_BOUNDS
    };
    
    struct InterpreterError : public std::exception {
        InterpreterError(interpreter_error_t error) {
            this->error = error;
        }
        
        const char* what () const throw ();
        
        interpreter_error_t error;
    };
}

#endif