#include <interpreter/error.h>

namespace ligma {

const char* InterpreterError::what () const throw () {
    switch (this->error) {
        case INTERPRETER_ERROR_UNKNOWN:
            return "INTERPRETER_ERROR_UNKNOWN";
            
        case INTERPRETER_ERROR_EXPLODE:
            return "INTERPRETER_ERROR_EXPLODE";
            
        case INTERPRETER_ERROR_UNCONVERTABLE_TO_INT:
            return "INTERPRETER_ERROR_UNCONVERTABLE_TO_INT";
        case INTERPRETER_ERROR_UNCONVERTABLE_TO_FLOAT:
            return "INTERPRETER_ERROR_UNCONVERTABLE_TO_FLOAT";
            
        case INTERPRETER_ERROR_ADDITION_NON_NUMERIC:
            return "INTERPRETER_ERROR_ADDITION_NON_NUMERIC";
        case INTERPRETER_ERROR_ADDITION_INCOMPATIBLE_LENGTHS:
            return "INTERPRETER_ERROR_ADDITION_INCOMPATIBLE_LENGTHS";
        case INTERPRETER_ERROR_SUBTRACTION_NON_NUMERIC:
            return "INTERPRETER_ERROR_SUBTRACTION_NON_NUMERIC";
        case INTERPRETER_ERROR_SUBTRACTION_INCOMPATIBLE_LENGTHS:
            return "INTERPRETER_ERROR_SUBTRACTION_INCOMPATIBLE_LENGTHS";
        case INTERPRETER_ERROR_MULTIPLICATION_NON_NUMERIC:
            return "INTERPRETER_ERROR_MULTIPLICATION_NON_NUMERIC";
        case INTERPRETER_ERROR_MULTIPLICATION_INCOMPATIBLE_LENGTHS:
            return "INTERPRETER_ERROR_MULTIPLICATION_INCOMPATIBLE_LENGTHS";
        case INTERPRETER_ERROR_DIVISION_NON_NUMERIC:
            return "INTERPRETER_ERROR_DIVISION_NON_NUMERIC";
        case INTERPRETER_ERROR_DIVISION_INCOMPATIBLE_LENGTHS:
            return "INTERPRETER_ERROR_DIVISION_INCOMPATIBLE_LENGTHS";
            
        case INTERPRETER_ERROR_REF_STACK_OVERFLOW:
            return "INTERPRETER_ERROR_REF_STACK_OVERFLOW";
        case INTERPRETER_ERROR_REF_STACK_UNDERFLOW:
            return "INTERPRETER_ERROR_REF_STACK_UNDERFLOW";
        case INTERPRETER_ERROR_JMP_STACK_OVERFLOW:
            return "INTERPRETER_ERROR_JMP_STACK_OVERFLOW";
        case INTERPRETER_ERROR_JMP_STACK_UNDERFLOW:
            return "INTERPRETER_ERROR_JMP_STACK_UNDERFLOW";
        case INTERPRETER_ERROR_LCL_STACK_OVERFLOW:
            return "INTERPRETER_ERROR_LCL_STACK_OVERFLOW";
        case INTERPRETER_ERROR_LCL_STACK_UNDERFLOW:
            return "INTERPRETER_ERROR_LCL_STACK_UNDERFLOW";
        case INTERPRETER_ERROR_LCL_STACK_ILLEGAL_LOCAL:
            return "INTERPRETER_ERROR_LCL_STACK_ILLEGAL_LOCAL";
            
        case INTERPRETER_ERROR_ASSIGNING_READ_ONLY:
            return "INTERPRETER_ERROR_ASSIGNING_READ_ONLY";
        case INTERPRETER_ERROR_ASSIGNING_NON_NUMERIC_TO_EXT_INT:
            return "INTERPRETER_ERROR_ASSIGNING_NON_NUMERIC_TO_EXT_INT";
        case INTERPRETER_ERROR_ASSIGNING_NON_NUMERIC_TO_EXT_FLOAT:
            return "INTERPRETER_ERROR_ASSIGNING_NON_NUMERIC_TO_EXT_FLOAT";
        case INTERPRETER_ERROR_ASSIGNING_NON_STRING_TO_EXT_STRING:
            return "INTERPRETER_ERROR_ASSIGNING_NON_STRING_TO_EXT_STRING";
        case INTERPRETER_ERROR_ASSIGNING_TO_EXT_STRING_NO_SPACE:
            return "INTERPRETER_ERROR_ASSIGNING_TO_EXT_STRING_NO_SPACE";
        case INTERPRETER_ERROR_ASSIGNING_TO_EXT_LENGTH_MISMATCH:
            return "INTERPRETER_ERROR_ASSIGNING_TO_EXT_LENGTH_MISMATCH";
        case INTERPRETER_ERROR_ASSIGNING_TO_ILLEGAL_EXT:
            return "INTERPRETER_ERROR_ASSIGNING_TO_ILLEGAL_EXT";
            
        case INTERPRETER_ERROR_LIST_OPERATION_ON_NON_LIST:
            return "INTERPRETER_ERROR_LIST_OPERATION_ON_NON_LIST";
            
        case INTERPRETER_ERROR_ILLEGAL_VECTOR_LENGTH:
            return "INTERPRETER_ERROR_ILLEGAL_VECTOR_LENGTH";
        case INTEPRETER_ERROR_VECTOR_MAKE_NON_NUMERIC:
            return "INTEPRETER_ERROR_VECTOR_MAKE_NON_NUMERIC";
        case INTERPRETER_ERROR_MAKE_VECTOR_IN_VECTOR:
            return "INTERPRETER_ERROR_MAKE_VECTOR_IN_VECTOR";
        case INTERPRETER_ERROR_MAKE_INT_VECTOR_NON_INT:
            return "INTERPRETER_ERROR_MAKE_INT_VECTOR_NON_INT";
            
        case INTERPRETER_ERROR_VECTOR_EXTRACT_NON_NUMERIC_INDEX:
            return "INTERPRETER_ERROR_VECTOR_EXTRACT_NON_NUMERIC_INDEX";
        case INTERPRETER_ERROR_VECTOR_EXTRACT_VECTOR_INDEX:
            return "INTERPRETER_ERROR_VECTOR_EXTRACT_VECTOR_INDEX";
        case INTERPRETER_ERROR_VECTOR_EXTRACT_ILLEGAL_VECTOR:
            return "INTERPRETER_ERROR_VECTOR_EXTRACT_ILLEGAL_VECTOR";
        case INTERPRETER_ERROR_VECTOR_EXTRACT_OUT_OF_BOUNDS:
            return "INTERPRETER_ERROR_VECTOR_EXTRACT_OUT_OF_BOUNDS";
            
        case INTERPRETER_ERROR_VECTOR_INSERT_NON_NUMERIC_INDEX:
            return "INTERPRETER_ERROR_VECTOR_INSERT_NON_NUMERIC_INDEX";
        case INTERPRETER_ERROR_VECTOR_INSERT_VECTOR_INDEX:
            return "INTERPRETER_ERROR_VECTOR_INSERT_VECTOR_INDEX";
        case INTERPRETER_ERROR_VECTOR_INSERT_ILLEGAL_VECTOR:
            return "INTERPRETER_ERROR_VECTOR_INSERT_ILLEGAL_VECTOR";
        case INTERPRETER_ERROR_VECTOR_INSERT_ILLEGAL_VALUE:
            return "INTERPRETER_ERROR_VECTOR_INSERT_ILLEGAL_VALUE";
        case INTERPRETER_ERROR_VECTOR_INSERT_VECTOR_IN_VECTOR:
            return "INTERPRETER_ERROR_VECTOR_INSERT_VECTOR_IN_VECTOR";
        case INTERPRETER_ERROR_VECTOR_INSERT_OUT_OF_BOUNDS:
            return "INTERPRETER_ERROR_VECTOR_INSERT_OUT_OF_BOUNDS";
            /*
        case AAA:
            return "AAA";
        case AAA:
            return "AAA";
        case AAA:
            return "AAA";
        case AAA:
            return "AAA";
*/
        default:
            return "ERROR!";
    }
}

}
